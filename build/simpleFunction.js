/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./ts/common/matrix.ts":
/*!*****************************!*\
  !*** ./ts/common/matrix.ts ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Matrix\": () => (/* binding */ Matrix)\n/* harmony export */ });\nvar __read = (undefined && undefined.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nvar __spreadArray = (undefined && undefined.__spreadArray) || function (to, from) {\n    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)\n        to[j] = from[i];\n    return to;\n};\nvar InitialMatrixType;\n(function (InitialMatrixType) {\n    InitialMatrixType[\"Empty\"] = \"empty\";\n    InitialMatrixType[\"Zero\"] = \"zero\";\n    InitialMatrixType[\"Identity\"] = \"identity\";\n    InitialMatrixType[\"Rotation\"] = \"rotation\";\n})(InitialMatrixType || (InitialMatrixType = {}));\nvar RotationAxis;\n(function (RotationAxis) {\n    RotationAxis[RotationAxis[\"X\"] = 1] = \"X\";\n    RotationAxis[RotationAxis[\"Y\"] = 2] = \"Y\";\n    RotationAxis[RotationAxis[\"Z\"] = 3] = \"Z\";\n})(RotationAxis || (RotationAxis = {}));\nvar Matrix = /** @class */ (function () {\n    function Matrix(nRows, nCols, type, rotationAxis, angle) {\n        if (type === void 0) { type = InitialMatrixType.Identity; }\n        if (type === InitialMatrixType.Rotation) {\n            if (nCols && nRows != nCols) {\n                throw \"A rotation matrix must be square\";\n            }\n            else if (rotationAxis === undefined && nRows === 4) {\n                throw \"For 4-dim matrices, an axis must be specified\";\n            }\n            else if (nRows != 3 && nRows != 4) {\n                throw \"Rotation matrix only available for 2D and 3D\";\n            }\n            else if (angle === undefined) {\n                throw \"For rotation matrix, an angle is required\";\n            }\n        }\n        this.nRows = nRows;\n        if (nCols) {\n            this.nCols = nCols;\n        }\n        else {\n            this.nCols = nRows;\n        }\n        if (type === InitialMatrixType.Empty) {\n            return this;\n        }\n        this.value = new Array(this.nRows);\n        if (type != InitialMatrixType.Rotation) {\n            for (var i = 0; i < this.nRows; i++) {\n                this.value[i] = new Array(this.nCols);\n                for (var j = 0; j < this.nCols; j++) {\n                    if (type === InitialMatrixType.Identity && i === j) {\n                        this.value[i][j] = 1;\n                    }\n                    else {\n                        this.value[i][j] = 0;\n                    }\n                }\n            }\n        }\n        else {\n            switch (nRows) {\n                case 3:\n                    this.value = [\n                        [Math.cos(angle), -Math.sin(angle), 0],\n                        [Math.sin(angle), Math.cos(angle), 0],\n                        [0, 0, 1]\n                    ];\n                case 4:\n                    switch (rotationAxis) {\n                        case RotationAxis.X:\n                            this.value = [\n                                [1, 0, 0, 0],\n                                [0, Math.cos(angle), -Math.sin(angle), 0],\n                                [0, Math.sin(angle), Math.cos(angle), 0],\n                                [0, 0, 0, 1]\n                            ];\n                            break;\n                        case RotationAxis.Y:\n                            this.value = [\n                                [Math.cos(angle), 0, Math.sin(angle), 0],\n                                [0, 1, 0, 0],\n                                [-Math.sin(angle), 0, Math.cos(angle), 0],\n                                [0, 0, 0, 1]\n                            ];\n                            break;\n                        case RotationAxis.Z:\n                            this.value = [\n                                [Math.cos(angle), -Math.sin(angle), 0, 0],\n                                [Math.sin(angle), Math.cos(angle), 0, 0],\n                                [0, 0, 1, 0],\n                                [0, 0, 0, 1]\n                            ];\n                            break;\n                    }\n            }\n        }\n    }\n    Matrix.prototype.display = function () {\n        console.log(this.value);\n    };\n    Matrix.prototype.isSquare = function () {\n        return (this.nRows == this.nCols);\n    };\n    Matrix.multiply = function (A, B) {\n        if (A.nCols != B.nRows) {\n            throw \"Illegal matrix multiplication\";\n        }\n        var lineLength = A.nCols;\n        var C = new Matrix(A.nRows, B.nCols, InitialMatrixType.Zero);\n        for (var i = 0; i < C.nRows; i++) {\n            for (var j = 0; j < C.nCols; j++) {\n                for (var k = 0; k < lineLength; k++) {\n                    C.value[i][j] += A.value[i][k] * B.value[k][j];\n                }\n            }\n        }\n        return C;\n    };\n    Matrix.prototype.rotate = function (rotationAxis, angle) {\n        if (!this.isSquare()) {\n            throw \"Matrix is not square\";\n        }\n        var dim = this.nRows;\n        var C = Matrix.multiply(new Matrix(dim, dim, InitialMatrixType.Rotation, rotationAxis, angle), this);\n        this.value = C.value;\n    };\n    Matrix.prototype.scale = function (rate) {\n        for (var i = 0; i < (this.nRows - 1); i++) {\n            for (var j = 0; j < (this.nCols - 1); j++) {\n                this.value[i][j] *= rate;\n            }\n        }\n    };\n    Matrix.perspectiveMatrix = function (angleToVertical, zAngle, scale) {\n        var A = new Matrix(4, 4, InitialMatrixType.Rotation, RotationAxis.X, -angleToVertical);\n        A.rotate(RotationAxis.Z, -zAngle);\n        A.scale(scale);\n        return A;\n    };\n    Matrix.prototype.toArray = function () {\n        var out = [];\n        for (var i = 0; i < this.nRows; i++) {\n            out.push.apply(out, __spreadArray([], __read(this.value[i])));\n        }\n        return out;\n    };\n    return Matrix;\n}());\n\n\n\n//# sourceURL=webpack://basic/./ts/common/matrix.ts?");

/***/ }),

/***/ "./ts/common/mesh2D.ts":
/*!*****************************!*\
  !*** ./ts/common/mesh2D.ts ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Mesh\": () => (/* binding */ Mesh)\n/* harmony export */ });\n\nvar Mesh = /** @class */ (function () {\n    function Mesh(nXvalues, nYvalues, xRange, yRange) {\n        // Initializes a bi-dimiensional mesh with points.\n        this.nXvalues = nXvalues;\n        this.nYvalues = nYvalues;\n        this.xRange = xRange;\n        this.yRange = yRange;\n        this.zRange = [0, 0];\n        this.xValues = new Array(nXvalues);\n        this.yValues = new Array(nYvalues);\n        this.zValues = new Array(nXvalues);\n        var initialX = xRange[0];\n        var initialY = yRange[0];\n        var deltaX = (xRange[1] - xRange[0]) / (nXvalues - 1);\n        var deltaY = (yRange[1] - yRange[0]) / (nYvalues - 1);\n        for (var i = 0; i < nXvalues; i++) {\n            this.xValues[i] = initialX + deltaX * i;\n            this.zValues[i] = new Array(nYvalues);\n        }\n        for (var j = 0; j < nYvalues; j++) {\n            this.yValues[j] = initialY + deltaY * j;\n        }\n    }\n    Mesh.prototype.introduceFunction = function (zFunction) {\n        var z0 = zFunction(this.xValues[0], this.yValues[1]);\n        this.zRange = [z0, z0];\n        for (var i = 0; i < this.nXvalues; i++) {\n            for (var j = 0; j < this.nYvalues; j++) {\n                this.zValues[i][j] = zFunction(this.xValues[i], this.yValues[j]);\n                if (this.zValues[i][j] < this.zRange[0]) {\n                    this.zRange[0] = this.zValues[i][j];\n                }\n                else if (this.zValues[i][j] > this.zRange[1]) {\n                    this.zRange[1] = this.zValues[i][j];\n                }\n            }\n        }\n    };\n    Mesh.prototype.generateWebGLdata = function (normalized) {\n        if (normalized === void 0) { normalized = false; }\n        var nValues = 18 * (this.nXvalues - 1) * (this.nYvalues - 1);\n        var buffer = new Array();\n        for (var i = 0; i < (this.nXvalues - 1); i++) {\n            for (var j = 0; j < (this.nYvalues - 1); j++) {\n                var x0 = this.xValues[i];\n                var x1 = this.xValues[i + 1];\n                var x2 = this.xValues[i];\n                var x3 = this.xValues[i + 1];\n                var y0 = this.yValues[j];\n                var y1 = this.yValues[j];\n                var y2 = this.yValues[j + 1];\n                var y3 = this.yValues[j + 1];\n                var z0 = this.zValues[i][j];\n                var z1 = this.zValues[i + 1][j];\n                var z2 = this.zValues[i][j + 1];\n                var z3 = this.zValues[i + 1][j + 1];\n                var zeroIndex = (i * this.nYvalues + j) * 18;\n                buffer.push.apply(buffer, [x0, y0, z0, x1, y1, z1, x2, y2, z2,\n                    x1, y1, z1, x3, y3, z3, x2, y2, z2]);\n            }\n        }\n        if (normalized) {\n            var deltaX = 2 / (this.xRange[1] - this.xRange[0]);\n            var deltaY = 2 / (this.yRange[1] - this.yRange[0]);\n            var deltaZ = 1 / (this.zRange[1] - this.zRange[0]);\n            for (var i = 0; i < nValues; i += 3) {\n                buffer[i] = (buffer[i] - this.xRange[0]) * deltaX - 1;\n                buffer[i + 1] = (buffer[i + 1] - this.yRange[0]) * deltaY - 1;\n                buffer[i + 2] = (buffer[i + 2] - this.zRange[0]) * deltaZ;\n            }\n        }\n        return { vertexBuffer: buffer,\n            nValues: nValues,\n            xRange: this.xRange,\n            yRange: this.yRange,\n            zRange: this.zRange };\n    };\n    return Mesh;\n}());\n\n\n\n//# sourceURL=webpack://basic/./ts/common/mesh2D.ts?");

/***/ }),

/***/ "./ts/common/utils.ts":
/*!****************************!*\
  !*** ./ts/common/utils.ts ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"createProgram\": () => (/* binding */ createProgram),\n/* harmony export */   \"appendAttributeProperties\": () => (/* binding */ appendAttributeProperties),\n/* harmony export */   \"generateAttributeBuffers\": () => (/* binding */ generateAttributeBuffers),\n/* harmony export */   \"fillAttributeBuffers\": () => (/* binding */ fillAttributeBuffers),\n/* harmony export */   \"enableAttributes\": () => (/* binding */ enableAttributes)\n/* harmony export */ });\nfunction createProgram(gl, vertexSource, fragmentSource) {\n    // Takes a context, a string with the code for the vertex shader and\n    // for the fragment shader. Compiles both codes and links them, generating\n    // a wrapped program that includes the final program and dictionaries with\n    // the attributes and uniforms of the program.\n    var vertexShader = gl.createShader(gl.VERTEX_SHADER);\n    var fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);\n    if (!vertexShader || !fragmentShader) {\n        throw \"Shaders could not be generated XDDDDD\";\n    }\n    var shaders = [\n        vertexShader,\n        fragmentShader\n    ];\n    var shaderNames = [\"vertex\", \"fragment\"];\n    var shaderSources = [vertexSource, fragmentSource];\n    var tryProgram = gl.createProgram();\n    if (!tryProgram) {\n        throw \"Program could not be generated (worse than compilation error)\";\n    }\n    var program = tryProgram;\n    for (var i = 0; i < 2; i++) {\n        gl.shaderSource(shaders[i], shaderSources[i]);\n        gl.compileShader(shaders[i]);\n        if (!gl.getShaderParameter(shaders[i], gl.COMPILE_STATUS)) {\n            console.log(\"Error compiling \" + shaderNames[i] + \" shader\");\n        }\n        gl.attachShader(program, shaders[i]);\n    }\n    gl.linkProgram(program);\n    if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {\n        console.log(\"Error linking program\");\n    }\n    var nActiveAttributes = gl.getProgramParameter(program, gl.ACTIVE_ATTRIBUTES);\n    var nActiveUniforms = gl.getProgramParameter(program, gl.ACTIVE_UNIFORMS);\n    var activeAttributes = {};\n    for (var i = 0; i < nActiveAttributes; i++) {\n        var currentAttribute = gl.getActiveAttrib(program, i);\n        if (!currentAttribute) {\n            throw \"Attribute failed\";\n        }\n        var newBuffer = gl.createBuffer();\n        if (!newBuffer) {\n            throw \"Error creating buffer\";\n        }\n        activeAttributes[currentAttribute.name] = { location: i, buffer: newBuffer };\n    }\n    var activeUniforms = {};\n    for (var i = 0; i < nActiveUniforms; i++) {\n        var currentUniform = gl.getActiveUniform(program, i);\n        if (!currentUniform) {\n            throw \"Uniform failed\";\n        }\n        var uniformLocation = gl.getUniformLocation(program, currentUniform.name);\n        if (!uniformLocation) {\n            throw \"Another frightening error that seems to be possible in this nigthmare\";\n        }\n        activeUniforms[currentUniform.name] = { location: uniformLocation };\n    }\n    return {\n        program: program,\n        attributes: activeAttributes,\n        uniforms: activeUniforms\n    };\n}\nfunction appendAttributeProperties(wrappedProgram, attributeProperties) {\n    // To each attribute in the wrapped program, includes the parameters\n    // of each one, as described in attributeData. THis is a dictionary\n    // which, for each attribute, includes:\n    //\n    //\t\ttype\t:\ttype of the data (for example, gl.FLOAT)\n    //\t\tsize\t:\tnumber of elements taken per iteration\n    //\t\tstride\t:\tthe stride (you know what that means)\n    //\t\toffset\t:\toffset of the attribute\n    //\n    // These parameters are not required until the attributes\n    // are enabled and configured.\n    var attributeList = Object.keys(wrappedProgram.attributes);\n    for (var i = 0; i < attributeList.length; i++) {\n        var key = attributeList[i];\n        console.log(key);\n        wrappedProgram.attributes[key].type = attributeProperties[key].type;\n        wrappedProgram.attributes[key].size = attributeProperties[key].size;\n        wrappedProgram.attributes[key].normalize = attributeProperties[key].normalize;\n        wrappedProgram.attributes[key].stride = attributeProperties[key].stride;\n        wrappedProgram.attributes[key].offset = attributeProperties[key].offset;\n    }\n}\nfunction generateAttributeBuffers(gl, wrappedProgram) {\n    // Generates a buffer for each attribute, and appends it\n    // to its dictionary inside wrappedProgram. Does not take\n    // any additional input, and does not require anything.\n    var attributeList = Object.keys(wrappedProgram.attributes);\n    for (var i = 0; i < attributeList.length; i++) {\n        var attribute = wrappedProgram.attributes[attributeList[i]];\n        var newBuffer = gl.createBuffer();\n        if (!newBuffer) {\n            throw \"Error creating buffer\";\n        }\n        attribute.buffer = newBuffer;\n    }\n}\nfunction fillAttributeBuffers(gl, wrappedProgram, attributeData) {\n    // Writed the data in attributeData to the buffers of each attribute.\n    // attributeData is a dictionary, taking the attributes as keys, and\n    // the data as values. It must be in the correct format (generated\n    // with new float32Array, for example). The buffers must have been\n    // previously generated (with \"generateAttributeBuffers()\"). This\n    // can be the last step before drawing.\n    var attributeList = Object.keys(wrappedProgram.attributes);\n    for (var i = 0; i < attributeList.length; i++) {\n        var attribute = wrappedProgram.attributes[attributeList[i]];\n        gl.bindBuffer(gl.ARRAY_BUFFER, attribute.buffer);\n        gl.bufferData(gl.ARRAY_BUFFER, attributeData[attributeList[i]], gl.STATIC_DRAW);\n    }\n}\nfunction enableAttributes(gl, wrappedProgram) {\n    // Enable and configure the pointer of all attributes in the program.\n    // Requires the attribute data to have been appended (with \n    // \"appendAttributeData()\") and the buffers to have been generated (with \n    // \"generateAttributeBuffers()\").\n    var attributeList = Object.keys(wrappedProgram.attributes);\n    for (var i = 0; i < attributeList.length; i++) {\n        var attribute = wrappedProgram.attributes[attributeList[i]];\n        gl.bindBuffer(gl.ARRAY_BUFFER, attribute.buffer);\n        gl.enableVertexAttribArray(attribute.location);\n        gl.vertexAttribPointer(attribute.location, attribute.size, attribute.type, attribute.normalize, attribute.stride, attribute.offset);\n    }\n}\n\n\n//# sourceURL=webpack://basic/./ts/common/utils.ts?");

/***/ }),

/***/ "./ts/simpleFunction/script.ts":
/*!*************************************!*\
  !*** ./ts/simpleFunction/script.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _common_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../common/utils */ \"./ts/common/utils.ts\");\n/* harmony import */ var _common_mesh2D__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../common/mesh2D */ \"./ts/common/mesh2D.ts\");\n/* harmony import */ var _common_matrix__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../common/matrix */ \"./ts/common/matrix.ts\");\n\n\n\nvar canvas = document.querySelector(\"#gl-canvas\");\nvar vertexShaderSource = document.querySelector(\"#vertexShader\").innerText;\nvar fragmentShaderSource = document.querySelector(\"#fragmentShader\").innerText;\nvar gl = canvas.getContext(\"webgl\");\nif (!gl) {\n    throw \"No gl\";\n}\nvar wrappedProgram = _common_utils__WEBPACK_IMPORTED_MODULE_0__.createProgram(gl, vertexShaderSource, fragmentShaderSource);\nconsole.log(wrappedProgram);\nvar attributeParameter = {\n    a_position: {\n        type: gl.FLOAT,\n        size: 3,\n        normalize: false,\n        stride: 0,\n        offset: 0\n    }\n};\nvar myMesh = new _common_mesh2D__WEBPACK_IMPORTED_MODULE_1__.Mesh(200, 200, [-5, 5], [-5, 5]);\nmyMesh.introduceFunction(function (x, y) { return Math.sin(x + y); });\nvar meshData = myMesh.generateWebGLdata(true);\nvar attributeData = {\n    a_position: new Float32Array(meshData.vertexBuffer)\n};\n_common_utils__WEBPACK_IMPORTED_MODULE_0__.appendAttributeProperties(wrappedProgram, attributeParameter);\n_common_utils__WEBPACK_IMPORTED_MODULE_0__.fillAttributeBuffers(gl, wrappedProgram, attributeData);\ngl.viewport(0, 0, gl.canvas.width, gl.canvas.height);\ngl.useProgram(wrappedProgram.program);\ngl.enable(gl.DEPTH_TEST);\n_common_utils__WEBPACK_IMPORTED_MODULE_0__.enableAttributes(gl, wrappedProgram);\nfunction drawAndAsk(now) {\n    var angle = now * 0.0003;\n    gl.uniformMatrix4fv(wrappedProgram.uniforms.u_matrix.location, false, _common_matrix__WEBPACK_IMPORTED_MODULE_2__.Matrix.perspectiveMatrix((45 / 180) * Math.PI, angle, 0.4).toArray());\n    gl.drawArrays(gl.TRIANGLES, 0, meshData.nValues / 3);\n    requestAnimationFrame(drawAndAsk);\n}\nrequestAnimationFrame(drawAndAsk);\n\n\n//# sourceURL=webpack://basic/./ts/simpleFunction/script.ts?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./ts/simpleFunction/script.ts");
/******/ 	
/******/ })()
;